//version: 1661114848
/*
 DO NOT CHANGE THIS FILE!
 Also, you may replace this file at any time if there is an update available.
 Please check https://github.com/GTNewHorizons/ExampleMod1.7.10/blob/main/build.gradle for updates.
 */


import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.internal.logging.text.StyledTextOutput.Style
import org.gradle.internal.logging.text.StyledTextOutputFactory

import java.nio.file.Files
import java.nio.file.Paths
import java.util.concurrent.TimeUnit
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        mavenCentral()

        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            // GTNH ForgeGradle Fork
            name = "GTNH Maven"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name 'Scala CI dependencies'
            url 'https://repo1.maven.org/maven2/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.9'
    }
}
plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'scala'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.5.30' apply false
    id 'org.jetbrains.kotlin.kapt' version '1.5.30' apply false
    id 'com.google.devtools.ksp' version '1.5.30-1.0.0' apply false
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'com.palantir.git-version' version '0.13.0' apply false
    id 'de.undercouch.download' version '5.0.1'
    id 'com.github.gmazzo.buildconfig' version '3.0.3' apply false
    id 'com.diffplug.spotless' version '6.7.2' apply false
}
boolean settingsupdated = verifySettingsGradle()
settingsupdated = verifyGitAttributes() || settingsupdated
if (settingsupdated)
    throw new GradleException("Settings has been updated, please re-run task.")

dependencies {
    implementation 'com.diffplug:blowdryer:1.6.0'
}

apply plugin: 'com.diffplug.blowdryer'

if (project.file('.git/HEAD').isFile()) {
    apply plugin: 'com.palantir.git-version'
}

def out = services.get(StyledTextOutputFactory).create('an-output')

apply plugin: 'forge'

def projectJavaVersion = JavaLanguageVersion.of(8)

java {
    toolchain {
        languageVersion.set(projectJavaVersion)
    }
}

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

boolean disableSpotless = project.hasProperty("disableSpotless") ? project.disableSpotless.toBoolean() : false

if (!disableSpotless) {
    apply plugin: 'com.diffplug.spotless'
    apply from: Blowdryer.file('spotless.gradle')
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    throw new GradleException("This project requires Java 8, but it's running on " + JavaVersion.current())
}

checkPropertyExists("modName")
checkPropertyExists("modId")
checkPropertyExists("modGroup")
checkPropertyExists("autoUpdateBuildScript")
checkPropertyExists("minecraftVersion")
checkPropertyExists("forgeVersion")
checkPropertyExists("replaceGradleTokenInFile")
checkPropertyExists("gradleTokenModId")
checkPropertyExists("gradleTokenModName")
checkPropertyExists("gradleTokenVersion")
checkPropertyExists("gradleTokenGroupName")
checkPropertyExists("apiPackage")
checkPropertyExists("accessTransformersFile")
checkPropertyExists("usesMixins")
checkPropertyExists("mixinPlugin")
checkPropertyExists("mixinsPackage")
checkPropertyExists("coreModClass")
checkPropertyExists("containsMixinsAndOrCoreModOnly")
checkPropertyExists("usesShadowedDependencies")
checkPropertyExists("developmentEnvironmentUserName")

boolean noPublishedSources = project.hasProperty("noPublishedSources") ? project.noPublishedSources.toBoolean() : false
boolean usesMixinDebug = project.hasProperty('usesMixinDebug') ?: project.usesMixins.toBoolean()
boolean forceEnableMixins = project.hasProperty('forceEnableMixins') ? project.forceEnableMixins.toBoolean() : false
String channel = project.hasProperty('channel') ? project.channel : 'stable'
String mappingsVersion = project.hasProperty('mappingsVersion') ? project.mappingsVersion : '12'
String javaSourceDir = "src/main/java/"
String scalaSourceDir = "src/main/scala/"
String kotlinSourceDir = "src/main/kotlin/"

String targetPackageJava = javaSourceDir + modGroup.toString().replaceAll("\\.", "/")
String targetPackageScala = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/")
String targetPackageKotlin = kotlinSourceDir + modGroup.toString().replaceAll("\\.", "/")
if (!(getFile(targetPackageJava).exists() || getFile(targetPackageScala).exists() || getFile(targetPackageKotlin).exists())) {
    throw new GradleException("Could not resolve \"modGroup\"! Could not find " + targetPackageJava + " or " + targetPackageScala + " or " + targetPackageKotlin)
}

if (apiPackage) {
    targetPackageJava = javaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + apiPackage.toString().replaceAll("\\.", "/")
    targetPackageScala = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + apiPackage.toString().replaceAll("\\.", "/")
    targetPackageKotlin = kotlinSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + apiPackage.toString().replaceAll("\\.", "/")
    if (!(getFile(targetPackageJava).exists() || getFile(targetPackageScala).exists() || getFile(targetPackageKotlin).exists())) {
        throw new GradleException("Could not resolve \"apiPackage\"! Could not find " + targetPackageJava + " or " + targetPackageScala + " or " + targetPackageKotlin)
    }
}

if (accessTransformersFile) {
    String targetFile = "src/main/resources/META-INF/" + accessTransformersFile
    if (!getFile(targetFile).exists()) {
        throw new GradleException("Could not resolve \"accessTransformersFile\"! Could not find " + targetFile)
    }
}

if (usesMixins.toBoolean()) {
    if (mixinsPackage.isEmpty() || mixinPlugin.isEmpty()) {
        throw new GradleException("\"mixinPlugin\" requires \"mixinsPackage\" and \"mixinPlugin\" to be set!")
    }

    targetPackageJava = javaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinsPackage.toString().replaceAll("\\.", "/")
    targetPackageScala = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinsPackage.toString().replaceAll("\\.", "/")
    targetPackageKotlin = kotlinSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinsPackage.toString().replaceAll("\\.", "/")
    if (!(getFile(targetPackageJava).exists() || getFile(targetPackageScala).exists() || getFile(targetPackageKotlin).exists())) {
        throw new GradleException("Could not resolve \"mixinsPackage\"! Could not find " + targetPackageJava + " or " + targetPackageScala + " or " + targetPackageKotlin)
    }

    String targetFileJava = javaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinPlugin.toString().replaceAll("\\.", "/") + ".java"
    String targetFileScala = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinPlugin.toString().replaceAll("\\.", "/") + ".scala"
    String targetFileScalaJava = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinPlugin.toString().replaceAll("\\.", "/") + ".java"
    String targetFileKotlin = kotlinSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + mixinPlugin.toString().replaceAll("\\.", "/") + ".kt"
    if (!(getFile(targetFileJava).exists() || getFile(targetFileScala).exists() || getFile(targetFileScalaJava).exists() || getFile(targetFileKotlin).exists())) {
        throw new GradleException("Could not resolve \"mixinPlugin\"! Could not find " + targetFileJava + " or " + targetFileScala + " or " + targetFileScalaJava + " or " + targetFileKotlin)
    }
}

if (coreModClass) {
    String targetFileJava = javaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + coreModClass.toString().replaceAll("\\.", "/") + ".java"
    String targetFileScala = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + coreModClass.toString().replaceAll("\\.", "/") + ".scala"
    String targetFileScalaJava = scalaSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + coreModClass.toString().replaceAll("\\.", "/") + ".java"
    String targetFileKotlin = kotlinSourceDir + modGroup.toString().replaceAll("\\.", "/") + "/" + coreModClass.toString().replaceAll("\\.", "/") + ".kt"
    if (!(getFile(targetFileJava).exists() || getFile(targetFileScala).exists() || getFile(targetFileScalaJava).exists() || getFile(targetFileKotlin).exists())) {
        throw new GradleException("Could not resolve \"coreModClass\"! Could not find " + targetFileJava + " or " + targetFileScala + " or " + targetFileScalaJava + " or " + targetFileKotlin)
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)

    // Make sure GregTech build won't time out
    System.setProperty("org.gradle.internal.http.connectionTimeout", 120000 as String)
    System.setProperty("org.gradle.internal.http.socketTimeout", 120000 as String)
}

// Fix Jenkins' Git: chmod a file should not be detected as a change and append a '.dirty' to the version
try {
    'git config core.fileMode false'.execute()
}
catch (Exception ignored) {
    out.style(Style.Failure).println("git isn't installed at all")
}

// Pulls version first from the VERSION env and then git tag
String identifiedVersion
String versionOverride = System.getenv("VERSION") ?: null
try {
    identifiedVersion = versionOverride == null ? gitVersion() : versionOverride
}
catch (Exception ignored) {
    out.style(Style.Failure).text(
        'This mod must be version controlled by Git AND the repository must provide at least one tag,\n' +
            'or the VERSION override must be set! ').style(Style.SuccessHeader).text('(Do NOT download from GitHub using the ZIP option, instead\n' +
        'clone the repository, see ').style(Style.Info).text('https://gtnh.miraheze.org/wiki/Development').style(Style.SuccessHeader).println(' for details.)'
    )
    versionOverride = 'NO-GIT-TAG-SET'
    identifiedVersion = versionOverride
}
version = minecraftVersion + '-' + identifiedVersion
ext {
    modVersion = identifiedVersion
}

if (identifiedVersion == versionOverride) {
    out.style(Style.Failure).text('Override version to ').style(Style.Identifier).text(modVersion).style(Style.Failure).println('!\7')
}

group = modGroup
if (project.hasProperty("customArchiveBaseName") && customArchiveBaseName) {
    archivesBaseName = customArchiveBaseName
} else {
    archivesBaseName = modId
}

def arguments = []
def jvmArguments = []

if (usesMixins.toBoolean() || forceEnableMixins) {
    arguments += [
        "--tweakClass org.spongepowered.asm.launch.MixinTweaker"
    ]
    if (usesMixinDebug.toBoolean()) {
        jvmArguments += [
            "-Dmixin.debug.countInjections=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.export=true"
        ]
    }
}

minecraft {
    version = minecraftVersion + '-' + forgeVersion + '-' + minecraftVersion
    runDir = 'run'

    if (replaceGradleTokenInFile) {
        replaceIn replaceGradleTokenInFile
        if (gradleTokenModId) {
            replace gradleTokenModId, modId
        }
        if (gradleTokenModName) {
            replace gradleTokenModName, modName
        }
        if (gradleTokenVersion) {
            replace gradleTokenVersion, modVersion
        }
        if (gradleTokenGroupName) {
            replace gradleTokenGroupName, modGroup
        }
    }

    clientIntellijRun {
        args(arguments)
        jvmArgs(jvmArguments)

        if (developmentEnvironmentUserName) {
            args("--username", developmentEnvironmentUserName)
        }
    }

    serverIntellijRun {
        args(arguments)
        jvmArgs(jvmArguments)
    }
}

if (file('addon.gradle').exists()) {
    apply from: 'addon.gradle'
}

apply from: 'repositories.gradle'

configurations {
    implementation.extendsFrom(shadowImplementation)  // TODO: remove after all uses are refactored
    implementation.extendsFrom(shadowCompile)
    implementation.extendsFrom(shadeCompile)
}

repositories {
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
    if (usesMixins.toBoolean() || forceEnableMixins) {
        maven {
            name 'sponge'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

dependencies {
    if (usesMixins.toBoolean()) {
        annotationProcessor('org.ow2.asm:asm-debug-all:5.0.3')
        annotationProcessor('com.google.guava:guava:24.1.1-jre')
        annotationProcessor('com.google.code.gson:gson:2.8.6')
        annotationProcessor('org.spongepowered:mixin:0.8-SNAPSHOT')
    }
    if (usesMixins.toBoolean() || forceEnableMixins) {
        // using 0.8 to workaround a issue in 0.7 which fails mixin application
        compile('com.github.GTNewHorizons:SpongePoweredMixin:0.7.12-GTNH') {
            // Mixin includes a lot of dependencies that are too up-to-date
            exclude module: 'launchwrapper'
            exclude module: 'guava'
            exclude module: 'gson'
            exclude module: 'commons-io'
            exclude module: 'log4j-core'
        }
        compile('com.github.GTNewHorizons:SpongeMixins:1.5.0')
    }
}

apply from: 'dependencies.gradle'

def mixingConfigRefMap = 'mixins.' + modId + '.refmap.json'
def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + mixingConfigRefMap
def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

task generateAssets {
    if (usesMixins.toBoolean()) {
        def mixinConfigFile = getFile("/src/main/resources/mixins." + modId + ".json");
        if (!mixinConfigFile.exists()) {
            mixinConfigFile.text = """{
  "required": true,
  "minVersion": "0.7.11",
  "package": "${modGroup}.${mixinsPackage}",
  "plugin": "${modGroup}.${mixinPlugin}",
  "refmap": "${mixingConfigRefMap}",
  "target": "@env(DEFAULT)",
  "compatibilityLevel": "JAVA_8",
  "mixins": [],
  "client": [],
  "server": []
}
"""
        }
    }
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = modGroup + ".shadow"
}

shadowJar {
    project.configurations.shadeCompile.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes(getManifestAttributes())
    }

    minimize()  // This will only allow shading for actually used classes
    configurations = [
        project.configurations.shadowImplementation,
        project.configurations.shadowCompile
    ]
    dependsOn(relocateShadowJar)
}

jar {
    project.configurations.shadeCompile.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes(getManifestAttributes())
    }

    if (usesShadowedDependencies.toBoolean()) {
        dependsOn(shadowJar)
        enabled = false
    }
}

reobf {
    if (usesMixins.toBoolean()) {
        addExtraSrgFile mixinSrg
    }
}

afterEvaluate {
    if (usesMixins.toBoolean()) {
        tasks.compileJava {
            options.compilerArgs += [
                "-AreobfSrgFile=${tasks.reobf.srg}",
                "-AoutSrgFile=${mixinSrg}",
                "-AoutRefMapFile=${refMap}",
                // Elan: from what I understand they are just some linter configs so you get some warning on how to properly code
                "-XDenableSunApiLintControl",
                "-XDignore.symbol.file"
            ]
        }
    }
}

runClient {
    if (developmentEnvironmentUserName) {
        arguments += [
            "--username",
            developmentEnvironmentUserName
        ]
    }

    args(arguments)
    jvmArgs(jvmArguments)
}

runServer {
    args(arguments)
    jvmArgs(jvmArguments)
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(
        javaToolchains.launcherFor {
            languageVersion = projectJavaVersion
        }
    )
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    exclude("spotless.gradle")

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace modVersion and minecraftVersion
        expand "minecraftVersion": project.minecraft.version,
            "modVersion": modVersion,
            "modId": modId,
            "modName": modName
    }

    if (usesMixins.toBoolean()) {
        from refMap
    }

    // copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'spotless.gradle'
    }
}

def getManifestAttributes() {
    def manifestAttributes = [:]
    if (!containsMixinsAndOrCoreModOnly.toBoolean() && (usesMixins.toBoolean() || coreModClass)) {
        manifestAttributes += ["FMLCorePluginContainsFMLMod": true]
    }

    if (accessTransformersFile) {
        manifestAttributes += ["FMLAT": accessTransformersFile.toString()]
    }

    if (coreModClass) {
        manifestAttributes += ["FMLCorePlugin": modGroup + "." + coreModClass]
    }

    if (usesMixins.toBoolean()) {
        manifestAttributes += [
            "TweakClass"    : "org.spongepowered.asm.launch.MixinTweaker",
            "MixinConfigs"  : "mixins." + modId + ".json",
            "ForceLoadAsMod": !containsMixinsAndOrCoreModOnly.toBoolean()
        ]
    }
    return manifestAttributes
}

task sourcesJar(type: Jar) {
    from(sourceSets.main.allSource)
    from(file("$projectDir/LICENSE"))
    getArchiveClassifier().set('sources')
}

task shadowDevJar(type: ShadowJar) {
    project.configurations.shadeCompile.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    from sourceSets.main.output
    getArchiveClassifier().set("dev")

    manifest {
        attributes(getManifestAttributes())
    }

    minimize()  // This will only allow shading for actually used classes
    configurations = [
        project.configurations.shadowImplementation,
        project.configurations.shadowCompile
    ]
}

task relocateShadowDevJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowDevJar
    prefix = modGroup + ".shadow"
}

task circularResolverJar(type: Jar) {
    dependsOn(relocateShadowDevJar)
    dependsOn(shadowDevJar)
    enabled = false
}

task devJar(type: Jar) {
    project.configurations.shadeCompile.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    from sourceSets.main.output
    getArchiveClassifier().set("dev")

    manifest {
        attributes(getManifestAttributes())
    }

    if (usesShadowedDependencies.toBoolean()) {
        dependsOn(circularResolverJar)
        enabled = false
    }
}

task apiJar(type: Jar) {
    from(sourceSets.main.allSource) {
        include modGroup.toString().replaceAll("\\.", "/") + "/" + apiPackage.toString().replaceAll("\\.", "/") + '/**'
    }

    from(sourceSets.main.output) {
        include modGroup.toString().replaceAll("\\.", "/") + "/" + apiPackage.toString().replaceAll("\\.", "/") + '/**'
    }

    from(sourceSets.main.resources.srcDirs) {
        include("LICENSE")
    }

    getArchiveClassifier().set('api')
}

artifacts {
    if (!noPublishedSources) {
        archives sourcesJar
    }
    archives devJar
    if (apiPackage) {
        archives apiJar
    }
}

// The gradle metadata includes all of the additional deps that we disabled from POM generation (including forgeBin with no groupID),
// and isn't strictly needed with the POM so just disable it.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

// workaround variable hiding in pom processing
def projectConfigs = project.configurations

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            if (usesShadowedDependencies.toBoolean()) {
                artifact source: shadowJar, classifier: ""
            }
            if (!noPublishedSources) {
                artifact source: sourcesJar, classifier: "sources"
            }
            artifact source: usesShadowedDependencies.toBoolean() ? shadowDevJar : devJar, classifier: "dev"
            if (apiPackage) {
                artifact source: apiJar, classifier: "api"
            }

            groupId = System.getenv("ARTIFACT_GROUP_ID") ?: "com.github.GTNewHorizons"
            artifactId = System.getenv("ARTIFACT_ID") ?: project.name
            // Using the identified version, not project.version as it has the prepended 1.7.10
            version = System.getenv("RELEASE_VERSION") ?: identifiedVersion

            // remove extra garbage from minecraft and minecraftDeps configuration
            pom.withXml {
                def badArtifacts = [:].withDefault { [] as Set<String> }
                for (configuration in [
                    projectConfigs.minecraft,
                    projectConfigs.minecraftDeps
                ]) {
                    for (dependency in configuration.allDependencies) {
                        badArtifacts[dependency.group == null ? "" : dependency.group] += dependency.name
                    }
                }
                // example for specifying extra stuff to ignore
                // badArtifacts["org.example.group"] += "artifactName"

                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    badArtifacts[it.groupId.text()].contains(it.artifactId.text())
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    repositories {
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases"
            credentials {
                username = System.getenv("MAVEN_USER") ?: "NONE"
                password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
            }
        }
    }
}

// Updating
task updateBuildScript {
    doLast {
        if (performBuildScriptUpdate(projectDir.toString())) return

        print("Build script already up-to-date!")
    }
}

if (!project.getGradle().startParameter.isOffline() && isNewBuildScriptVersionAvailable(projectDir.toString())) {
    if (autoUpdateBuildScript.toBoolean()) {
        performBuildScriptUpdate(projectDir.toString())
    } else {
        out.style(Style.SuccessHeader).println("Build script update available! Run 'gradle updateBuildScript'")
    }
}

static URL availableBuildScriptUrl() {
    new URL("https://raw.githubusercontent.com/GTNewHorizons/ExampleMod1.7.10/master/build.gradle")
}

static URL exampleSettingsGradleUrl() {
    new URL("https://raw.githubusercontent.com/GTNewHorizons/ExampleMod1.7.10/master/settings.gradle.example")
}

static URL exampleGitAttributesUrl() {
    new URL("https://raw.githubusercontent.com/GTNewHorizons/ExampleMod1.7.10/master/.gitattributes")
}


boolean verifyGitAttributes() {
    def gitattributesFile = getFile(".gitattributes")
    if (!gitattributesFile.exists()) {
        println("Downloading default .gitattributes")
        exampleGitAttributesUrl().withInputStream { i -> gitattributesFile.withOutputStream { it << i } }
        exec {
            workingDir '.'
            commandLine 'git', 'add', '--renormalize', '.'
        }
        return true
    }
    return false
}

boolean verifySettingsGradle() {
    def settingsFile = getFile("settings.gradle")
    if (!settingsFile.exists()) {
        println("Downloading default settings.gradle")
        exampleSettingsGradleUrl().withInputStream { i -> settingsFile.withOutputStream { it << i } }
        return true
    }
    return false
}

boolean performBuildScriptUpdate(String projectDir) {
    if (isNewBuildScriptVersionAvailable(projectDir)) {
        def buildscriptFile = getFile("build.gradle")
        availableBuildScriptUrl().withInputStream { i -> buildscriptFile.withOutputStream { it << i } }
        out.style(Style.Success).print("Build script updated. Please REIMPORT the project or RESTART your IDE!")
        boolean settingsupdated = verifySettingsGradle()
        settingsupdated = verifyGitAttributes() || settingsupdated
        if (settingsupdated)
            throw new GradleException("Settings has been updated, please re-run task.")
        return true
    }
    return false
}

boolean isNewBuildScriptVersionAvailable(String projectDir) {
    Map parameters = ["connectTimeout": 2000, "readTimeout": 2000]

    String currentBuildScript = getFile("build.gradle").getText()
    String currentBuildScriptHash = getVersionHash(currentBuildScript)
    String availableBuildScript = availableBuildScriptUrl().newInputStream(parameters).getText()
    String availableBuildScriptHash = getVersionHash(availableBuildScript)

    boolean isUpToDate = currentBuildScriptHash.empty || availableBuildScriptHash.empty || currentBuildScriptHash == availableBuildScriptHash
    return !isUpToDate
}

static String getVersionHash(String buildScriptContent) {
    String versionLine = buildScriptContent.find("^//version: [a-z0-9]*")
    if (versionLine != null) {
        return versionLine.split(": ").last()
    }
    return ""
}

configure(updateBuildScript) {
    group = 'forgegradle'
    description = 'Updates the build script to the latest version'
}

// Parameter Deobfuscation

task deobfParams {
    doLast {

        String mcpDir = "$project.gradle.gradleUserHomeDir/caches/minecraft/de/oceanlabs/mcp/mcp_$channel/$mappingsVersion"
        String mcpZIP = "$mcpDir/mcp_$channel-$mappingsVersion-${minecraftVersion}.zip"
        String paramsCSV = "$mcpDir/params.csv"

        download.run {
            src "https://maven.minecraftforge.net/de/oceanlabs/mcp/mcp_$channel/$mappingsVersion-$minecraftVersion/mcp_$channel-$mappingsVersion-${minecraftVersion}.zip"
            dest mcpZIP
            overwrite false
        }

        if (!file(paramsCSV).exists()) {
            println("Extracting MCP archive ...")
            unzip(mcpZIP, mcpDir)
        }

        println("Parsing params.csv ...")
        Map<String, String> params = new HashMap<>()
        Files.lines(Paths.get(paramsCSV)).forEach { line ->
            String[] cells = line.split(",")
            if (cells.length > 2 && cells[0].matches("p_i?\\d+_\\d+_")) {
                params.put(cells[0], cells[1])
            }
        }

        out.style(Style.Success).println("Modified ${replaceParams(file("$projectDir/src/main/java"), params)} files!")
        out.style(Style.Failure).println("Don't forget to verify that the code still works as before!\n It could be broken due to duplicate variables existing now\n or parameters taking priority over other variables.")
    }
}

static int replaceParams(File file, Map<String, String> params) {
    int fileCount = 0

    if (file.isDirectory()) {
        for (File f : file.listFiles()) {
            fileCount += replaceParams(f, params)
        }
        return fileCount
    }
    println("Visiting ${file.getName()} ...")
    try {
        String content = new String(Files.readAllBytes(file.toPath()))
        int hash = content.hashCode()
        params.forEach { key, value ->
            content = content.replaceAll(key, value)
        }
        if (hash != content.hashCode()) {
            Files.write(file.toPath(), content.getBytes("UTF-8"))
            return 1
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return 0
}

// Credit: bitsnaps (https://gist.github.com/bitsnaps/00947f2dce66f4bbdabc67d7e7b33681)
static unzip(String zipFileName, String outputDir) {
    byte[] buffer = new byte[16384]
    ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFileName))
    ZipEntry zipEntry = zis.getNextEntry()
    while (zipEntry != null) {
        File newFile = new File(outputDir + File.separator, zipEntry.name)
        if (zipEntry.isDirectory()) {
            if (!newFile.isDirectory() && !newFile.mkdirs()) {
                throw new IOException("Failed to create directory $newFile")
            }
        } else {
            // fix for Windows-created archives
            File parent = newFile.parentFile
            if (!parent.isDirectory() && !parent.mkdirs()) {
                throw new IOException("Failed to create directory $parent")
            }
            // write file content
            FileOutputStream fos = new FileOutputStream(newFile)
            int len = 0
            while ((len = zis.read(buffer)) > 0) {
                fos.write(buffer, 0, len)
            }
            fos.close()
        }
        zipEntry = zis.getNextEntry()
    }
    zis.closeEntry()
    zis.close()
}

configure(deobfParams) {
    group = 'forgegradle'
    description = 'Rename all obfuscated parameter names inherited from Minecraft classes'
}

// Dependency Deobfuscation

def deobf(String sourceURL) {
    try {
        URL url = new URL(sourceURL)
        String fileName = url.getFile()

        //get rid of directories:
        int lastSlash = fileName.lastIndexOf("/")
        if (lastSlash > 0) {
            fileName = fileName.substring(lastSlash + 1)
        }
        //get rid of extension:
        if (fileName.endsWith(".jar") || fileName.endsWith(".litemod")) {
            fileName = fileName.substring(0, fileName.lastIndexOf("."))
        }

        String hostName = url.getHost()
        if (hostName.startsWith("www.")) {
            hostName = hostName.substring(4)
        }
        List parts = Arrays.asList(hostName.split("\\."))
        Collections.reverse(parts)
        hostName = String.join(".", parts)

        return deobf(sourceURL, "$hostName/$fileName")
    } catch (Exception e) {
        return deobf(sourceURL, "deobf/${sourceURL.hashCode()}")
    }
}

// The method above is to be preferred. Use this method if the filename is not at the end of the URL.
def deobf(String sourceURL, String rawFileName) {
    String bon2Version = "2.5.1"
    String fileName = URLDecoder.decode(rawFileName, "UTF-8")
    String cacheDir = "$project.gradle.gradleUserHomeDir/caches"
    String bon2Dir = "$cacheDir/forge_gradle/deobf"
    String bon2File = "$bon2Dir/BON2-${bon2Version}.jar"
    String obfFile = "$cacheDir/modules-2/files-2.1/${fileName}.jar"
    String deobfFile = "$cacheDir/modules-2/files-2.1/${fileName}-deobf.jar"

    if (file(deobfFile).exists()) {
        return files(deobfFile)
    }

    String mappingsVer
    String remoteMappings = project.hasProperty('remoteMappings') ? project.remoteMappings : 'https://raw.githubusercontent.com/MinecraftForge/FML/1.7.10/conf/'
    if (remoteMappings) {
        String id = "${forgeVersion.split("\\.")[3]}-$minecraftVersion"
        String mappingsZIP = "$cacheDir/forge_gradle/maven_downloader/de/oceanlabs/mcp/mcp_snapshot_nodoc/$id/mcp_snapshot_nodoc-${id}.zip"

        zipMappings(mappingsZIP, remoteMappings, bon2Dir)

        mappingsVer = "snapshot_$id"
    } else {
        mappingsVer = "${channel}_$mappingsVersion"
    }

    download.run {
        src "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/com/github/parker8283/BON2/$bon2Version-CUSTOM/BON2-$bon2Version-CUSTOM-all.jar"
        dest bon2File
        quiet true
        overwrite false
    }

    download.run {
        src sourceURL
        dest obfFile
        quiet true
        overwrite false
    }

    exec {
        commandLine 'java', '-jar', bon2File, '--inputJar', obfFile, '--outputJar', deobfFile, '--mcVer', minecraftVersion, '--mappingsVer', mappingsVer, '--notch'
        workingDir bon2Dir
        standardOutput = new FileOutputStream("${deobfFile}.log")
    }

    return files(deobfFile)
}

def zipMappings(String zipPath, String url, String bon2Dir) {
    File zipFile = new File(zipPath)
    if (zipFile.exists()) {
        return
    }

    String fieldsCache = "$bon2Dir/data/fields.csv"
    String methodsCache = "$bon2Dir/data/methods.csv"

    download.run {
        src "${url}fields.csv"
        dest fieldsCache
        quiet true
    }
    download.run {
        src "${url}methods.csv"
        dest methodsCache
        quiet true
    }

    zipFile.getParentFile().mkdirs()
    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))

    zos.putNextEntry(new ZipEntry("fields.csv"))
    Files.copy(Paths.get(fieldsCache), zos)
    zos.closeEntry()

    zos.putNextEntry(new ZipEntry("methods.csv"))
    Files.copy(Paths.get(methodsCache), zos)
    zos.closeEntry()

    zos.close()
}

// Helper methods

def checkPropertyExists(String propertyName) {
    if (!project.hasProperty(propertyName)) {
        throw new GradleException("This project requires a property \"" + propertyName + "\"! Please add it your \"gradle.properties\". You can find all properties and their description here: https://github.com/GTNewHorizons/ExampleMod1.7.10/blob/main/gradle.properties")
    }
}

def getFile(String relativePath) {
    return new File(projectDir, relativePath)
}
