/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
configurations {
    transformedMod // Mods that can be transformed - used for compiling angelica, but not necessary at runtime
    transformedMod.canBeConsumed = false
    transformedModCompileOnly
    transformedModCompileOnly.canBeConsumed = false

    // Add the transformed mod dependencies to the compilation classpaths, but don't publish them in the Maven metadata
    compileClasspath.extendsFrom(transformedMod, transformedModCompileOnly)
    testCompileClasspath.extendsFrom(transformedMod, transformedModCompileOnly)

    // Can be enabled for testing if desired
    // runtimeClasspath.extendsFrom(transformedMod)
    // testRuntimeClasspath.extendsFrom(transformedMod)
}

minecraft {
    mainLwjglVersion = 3
    lwjgl3Version = "3.3.3"
}

dependencies {
    api("com.github.GTNewHorizons:lwjgl3ify:2.1.11:dev")

    api("com.github.GTNewHorizons:Hodgepodge:2.6.40")

    compileOnly("com.gtnewhorizons.retrofuturabootstrap:RetroFuturaBootstrap:1.0.10") { transitive = false }

    compileOnly("org.projectlombok:lombok:1.18.36") { transitive = false }
    annotationProcessor("org.projectlombok:lombok:1.18.36")

    // Use modern models+textures to inject QuadProviders
    devOnlyNonPublishable('com.github.GTNewHorizons:TX-Loader:1.8.2:dev')

    // Iris Shaders
    compileOnly('org.jetbrains:annotations:26.0.2')
    api("com.github.GTNewHorizons:GTNHLib:0.6.21:dev")
    shadowImplementation("org.embeddedt.celeritas:celeritas-common:2.3.0-dev.6") // LGPL 3.0
    shadowImplementation("org.anarres:jcpp:1.4.14") // Apache 2.0
    shadowImplementation("org.taumc:glsl-transformation-lib:0.2.0-4.g6b42bca") {
        exclude module: "antlr4" // we only want to shadow the runtime module
    }
    shadowImplementation("org.antlr:antlr4-runtime:4.13.2")
    shadowImplementation("org.apache.commons:commons-csv:1.10.0") // Apache 2.0
    compileOnly "org.apache.ant:ant:1.8.2"

    // Because who doesn't want NEI
    devOnlyNonPublishable('com.github.GTNewHorizons:NotEnoughItems:2.7.29-GTNH:dev')
    devOnlyNonPublishable('com.github.GTNewHorizons:CodeChickenCore:1.4.1:dev')

    // Notfine Deps
    compileOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev")
    devOnlyNonPublishable("com.github.GTNewHorizons:Baubles:1.0.4:dev")
    compileOnly("com.github.GTNewHorizons:twilightforest:2.7.5:dev") { transitive = false }
    compileOnly(rfg.deobf('curse.maven:witchery-69673:2234410'))
    compileOnly("com.github.GTNewHorizons:TinkersConstruct:1.13.10-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Natura:2.8.2:dev")

    compileOnly("com.github.GTNewHorizons:ThaumicHorizons:1.7.1:dev")

    compileOnly("com.github.GTNewHorizons:Battlegear2:1.4.2:dev") { transitive = false }
    compileOnly('com.github.GTNewHorizons:Backhand:1.6.11') { transitive = false }

    compileOnly("com.falsepattern:chunkapi-mc1.7.10:0.5.1:api") { transitive = false }
    compileOnly("com.falsepattern:endlessids-mc1.7.10:1.5-beta0003:dev") { transitive = false }

    compileOnly(rfg.deobf("curse.maven:extrautils-225561:2264383"))
    compileOnly(rfg.deobf("curse.maven:dynamiclights-227874:2337326"))

    compileOnly("curse.maven:minefactory-reloaded-66672:2277486")

    compileOnly("com.github.GTNewHorizons:NotEnoughIds:2.1.6:dev") // Mixin Version
    compileOnly("com.github.GTNewHorizons:NotEnoughIds-Legacy:1.4.7:dev") // ASM Version

    compileOnly(rfg.deobf("curse.maven:campfirebackport-387444:4611675"))
    compileOnly(rfg.deobf("curse.maven:xaeros-minimap-263420:5060684"))

    compileOnly("com.github.GTNewHorizons:HoloInventory:2.5.1-GTNH:dev")

    runtimeOnlyNonPublishable(rfg.deobf("CoreTweaks:CoreTweaks:0.3.3.2"))
    compileOnly("com.github.GTNewHorizons:GT5-Unofficial:5.09.51.341-pre:dev") { transitive = false }

    // Hodgepodge
    transformedMod("net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev")

    // Better Crashes
    compileOnly("com.github.GTNewHorizons:BetterCrashes:1.4.0-GTNH:dev")

    // Tests
    testImplementation(platform('org.junit:junit-bom:5.11.4'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.mockito:mockito-core:3.+")

    shadowImplementation("com.electronwill.night-config:toml:3.6.6")
    shadowImplementation("com.electronwill.night-config:json:3.6.6")
    shadowImplementation("org.lz4:lz4-java:1.8.0")
    shadowImplementation("org.tukaani:xz:1.9")
    shadowImplementation("org.xerial:sqlite-jdbc:3.47.2.0")
    shadowImplementation("org.lwjgl:lwjgl-jawt:3.3.3") {
         exclude group: "org.lwjgl", module: "lwjgl"
    }
}
