package com.gtnewhorizons.angelica.loading.rfb.util;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import com.gtnewhorizons.angelica.loading.rfb.AngelicaRfbPlugin;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Logs LWJGL methods that aren't redirected to help identify methods that should be added to the redirects.
 */
public class UnredirectedMethodLogger {

    private static final Logger LOGGER = LogManager.getLogger("AngelicaUnredirectedMethods");
    private static final Set<String> loggedMethods = ConcurrentHashMap.newKeySet();
    private static final String LOG_FILE_PATH = "logs/unredirected_lwjgl_methods.log";
    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private static boolean logFileInitialized = false;
    private static String lwjglVersion = "unknown";

    static {
        // Try to detect LWJGL version
        try {
            final Class<?> gl11Class = Class.forName("org.lwjgl.opengl.GL11");
            final Package pkg = gl11Class.getPackage();

            if (pkg != null && pkg.getImplementationVersion() != null) {
                lwjglVersion = pkg.getImplementationVersion();
                LOGGER.info("Detected LWJGL version: {}", lwjglVersion);
            }
        } catch (ClassNotFoundException e) {
            LOGGER.error("Could not detect LWJGL version", e);
        }
    }

    /**
     * Initializes the log file with a header if it doesn't exist.
     */
    private static synchronized void initializeLogFile() {
        if (logFileInitialized || !AngelicaRfbPlugin.VERBOSE) {
            return;
        }

        try {
            final File logFile = new File(LOG_FILE_PATH);
            if (!logFile.exists()) {
                // Ensure directory exists
                final File parentDir = logFile.getParentFile();
                if (parentDir != null && !parentDir.exists()) {
                    parentDir.mkdirs();
                }

                // Create file with header
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(logFile))) {
                    writer.write("# Unredirected LWJGL methods log - Generated by Angelica\n");
                    writer.write("# LWJGL Version: " + lwjglVersion + "\n");
                    writer.write("# Format: [Timestamp] ClassName.methodName(descriptor)\n");
                    writer.write("# This file helps identify LWJGL methods that should be redirected\n\n");
                }

                LOGGER.info("Created unredirected methods log file at {}", logFile.getAbsolutePath());
            }

            logFileInitialized = true;
        } catch (IOException e) {
            LOGGER.error("Failed to initialize unredirected methods log file", e);
        }
    }

    /**
     * Logs an unredirected LWJGL method call.
     * Each method is only logged once per session.
     *
     * @param className The class containing the method
     * @param methodName The method name
     * @param descriptor The method descriptor
     */
    public static void logUnredirectedMethod(String className, String methodName, String descriptor) {
        if(!AngelicaRfbPlugin.VERBOSE) return;

        final String key = className + "." + methodName + descriptor;

        // Only log each method once
        if (!loggedMethods.add(key)) {
            return;
        }

        // Log to console
        LOGGER.warn("Unredirected LWJGL method: {}", key);

        // Log to file
        try {
            initializeLogFile();

            final String timestamp = LocalDateTime.now().format(DATE_FORMAT);
            final String logLine = String.format("[%s] %s\n", timestamp, key);

            Files.write(
                Paths.get(LOG_FILE_PATH),
                logLine.getBytes(),
                StandardOpenOption.APPEND
            );
        } catch (IOException e) {
            LOGGER.error("Failed to write to unredirected methods log file", e);
        }
    }


    /**
     * Checks if the class name belongs to an LWJGL package.
     *
     * @param className The class name to check
     * @return true if it's an LWJGL class, false otherwise
     */
    public static boolean isLwjglClass(String className) {
        return className.startsWith("org/lwjgl/");
    }
}
